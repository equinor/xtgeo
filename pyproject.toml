[build-system]
requires = [
    "numpy>=2.0.0",
    "pybind11",
    "scikit-build-core[pyproject]>=0.10",
    "swig<4.3.0",
]
build-backend = "scikit_build_core.build"

[project]
name = "xtgeo"
description = "XTGeo is a Python library for 3D grids, surfaces, wells, etc"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "LGPL-3.0" }
authors = [{ name = "Equinor", email = "fg_fmu-atlas@equinor.com" }]
keywords = ["grids", "surfaces", "wells", "cubes"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Natural Language :: English",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
]
dynamic = ["version"]
dependencies = [
    "deprecation",
    "h5py>=3",
    "hdf5plugin>=2.3",
    "joblib",
    "matplotlib>=3.3",
    "numpy",
    "pandas>=1.1",
    "pyarrow",
    "resfo>=4.0.0",
    "roffio>=0.0.2",
    "scipy>=1.5",
    "segyio>1.8.0",
    "shapely>=1.6.2",
    "tables",
    "typing_extensions",
    "xtgeoviz",
]

[project.urls]
Homepage = "https://github.com/equinor/xtgeo"
Repository = "https://github.com/equinor/xtgeo"
Issues = "https://github.com/equinor/xtgeo/issues"
Documentation = "https://xtgeo.readthedocs.io"

[project.optional-dependencies]
dev = [
    "clang-format",
    "cmake-format",
    "coverage>=4.1",
    "hypothesis",
    "mypy",
    "pandas-stubs",
    "psutil",
    "pydocstyle",
    "pytest",
    "pytest-benchmark",
    "pytest-cov",
    "pytest-mock",
    "pytest-runner",
    "pytest-snapshot",
    "pytest-xdist",
    "ruff",
]
docs = [
    "autoclasstoc",
    "myst-parser",
    "pydocstyle",
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme",
    "sphinx-tabs<3.4.5",  # 3.4.5 breaks doc parsing
    "sphinx-toolbox",
]

[tool.scikit-build]
cmake.version = "CMakeLists.txt"
cmake.verbose = true
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/xtgeo/common/version.py"]
wheel.install-dir = "xtgeo"

[tool.cibuildwheel]
build = "cp3{10,11,12,13}-*"
skip = ["*-musllinux_*", "*-win32", "*-manylinux_i686"]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
before-build = "python -m pip install -U pip"

test-extras = ["dev"]
before-test = [
    "pushd {package}",
    "git clone --depth 1 https://github.com/equinor/xtgeo-testdata ../xtgeo-testdata || true",
]  # ||Â true to prevent second wheel builds from re-cloning
test-command = [
    "pushd {package}",
    # Ignore forking tests as they do not work well with CIBW
    'pytest -n 4 tests --disable-warnings -m "not hypothesis" --ignore tests/test_well --ignore-glob="*forks.py"',
]

[tool.cibuildwheel.windows]
before-all = "vcpkg install eigen3 fmt --triplet=x64-windows"

[tool.cibuildwheel.linux]
before-all = "yum update -y && yum install -y eigen3-devel fmt-devel || (apt-get update && apt-get install -y libeigen3-dev libfmt-dev)"

[tool.cibuildwheel.macos]
before-all = [
    "brew update",
    "brew install hdf5 eigen c-blosc",
]
environment = { HDF5_DIR = "/opt/homebrew" }

[tool.pydocstyle]
convention = "google"
match = '(?!(test_|_)).*\.py'

# reminder if pytest on the command line:
# -o log_cli=true -o log_cli_format="%(levelname)8s (%(relativeCreated)6.0fms) %(filename)44s [%(funcName)40s()] %(lineno)4d >>   %(message)s" -o log_cli_level=debug
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--verbose"
log_cli = "False"
log_cli_format = "%(levelname)8s (%(relativeCreated)6.0fms) %(filename)44s [%(funcName)40s()] %(lineno)4d >>   %(message)s"
log_cli_level = "INFO"
testpaths = "tests"
markers = [
    "bigtest: A big test not executed by default",
    "requires_opm: A test requiring opm in the environment",
    "requires_roxar: Test requires to run in RMS python",
]
doctest_optionflags = "ELLIPSIS"

[tool.setuptools_scm]
write_to = "src/xtgeo/common/version.py"

[tool.ruff]
line-length = 88

[tool.ruff.lint]
ignore = [
    "C901",
]
select = [
    "C",
    "E",
    "F",
    "I",
    "NPY201",  # numpy 2 migrations
    "PIE",
    "Q",
    "RET",
    "RSE",
    "SIM",
    "TCH",
    "TID",
    "W",
]

[tool.ruff.lint.isort]
combine-as-imports = true
